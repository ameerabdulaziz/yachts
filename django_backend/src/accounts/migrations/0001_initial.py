# Generated by Django 4.2.7 on 2025-08-26 17:49

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('phone', models.CharField(blank=True, max_length=20, null=True, unique=True)),
                ('first_name', models.CharField(max_length=30)),
                ('last_name', models.CharField(max_length=30)),
                ('profile_image', models.ImageField(blank=True, null=True, upload_to='profiles/')),
                ('role', models.CharField(choices=[('visitor', 'Visitor'), ('renter', 'Renter'), ('owner', 'Owner'), ('both', 'Owner & Renter'), ('admin', 'Administrator')], default='renter', max_length=20)),
                ('is_verified', models.BooleanField(default=False)),
                ('fuel_wallet_balance', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('google_id', models.CharField(blank=True, max_length=100, null=True, unique=True)),
                ('facebook_id', models.CharField(blank=True, max_length=100, null=True, unique=True)),
                ('preferred_yacht_size', models.CharField(blank=True, max_length=50, null=True)),
                ('preferred_locations', models.JSONField(blank=True, default=list)),
                ('investment_budget', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('date_joined', models.DateTimeField(auto_now_add=True)),
                ('last_login_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('notification_preferences', models.JSONField(blank=True, default=dict)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bio', models.TextField(blank=True, max_length=500)),
                ('sailing_experience', models.CharField(blank=True, max_length=100)),
                ('certifications', models.JSONField(blank=True, default=list)),
                ('emergency_contact_name', models.CharField(blank=True, max_length=100)),
                ('emergency_contact_phone', models.CharField(blank=True, max_length=20)),
                ('profile_visibility', models.CharField(choices=[('public', 'Public'), ('owners_only', 'Yacht Owners Only'), ('private', 'Private')], default='owners_only', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_profiles',
            },
        ),
    ]
